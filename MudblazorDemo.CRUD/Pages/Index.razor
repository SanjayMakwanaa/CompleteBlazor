@page "/"
@using MudblazorDemo.CRUD.Data
@inject MudblazorDemo.CRUD.Services.ICustomerService customerService
@inject MudBlazor.ISnackbar snackBar
@using MudBlazor
@using Microsoft.EntityFrameworkCore;
@using System.Linq
@inject ILocationService locationService

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Customers</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="customer.FirstName" Label="First Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="customer.LastName" Label="Last Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="customer.PhoneNumber" Label="Phone Number" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>

        <form method="post" asp-action="SaveState">
            <MudSelect Label="State" @bind-Value="customer.State" Variant="Variant.Filled" Margin="Margin.Normal">
                @foreach (var state in statesList)
                {
                    <MudSelectItem Value="@state">@state</MudSelectItem>
                }
            </MudSelect>

            <MudSelect Label="City" @bind-Value="customer.City" Variant="Variant.Filled" Margin="Margin.Normal">
                @foreach (var city in citiesList)
                {
                    <MudSelectItem Value="@city">@city</MudSelectItem>
                }
            </MudSelect>
     
        </form>
        <br />
        <MudFab Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Customer</MudFab>
    </MudCardContent>
</MudCard>


<MudTable Elevation="25" Items="GetCustomers()" Filter="new Func<Customer, bool>(Search)" @bind-customer="customer" PageSize="10" Paginated="true" AlwaysShowPager="true" Class="mud-table-container mud-table-responsive">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Customers</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Customers..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Phone Number</MudTh>
        <MudTh>State</MudTh>
        <MudTh>City</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
        <MudTd DataLabel="State">@context.State</MudTd>
        <MudTd DataLabel="City">@context.City</MudTd>
        <MudTd DataLabel="" Class="text-center">
            <MudTd>
                <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
            <MudTd Class="ml-2">
                <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="pageSizeOptions"></MudTablePager>
    </PagerContent>
</MudTable>


@code {

    [CascadingParameter]
    public string SelectedState { get; set; }

    private void OnStateValueChanged(string value)
    {
        SelectedState = value;
    }

    private int[] pageSizeOptions = new int[] { 3, 10, 15 };    

    private List<string> Cities { get; set; }

    private bool hover = false;
    private string searchString = "";
    private Customer customer = new Customer();
    private List<Customer> customers = new List<Customer>();

    private List<Countries> countriesList;

    private List<string> statesList = new List<string>();
    private List<string> citiesList = new List<string>();


    private string selectedState;


    private List<Customer> GetCustomers()
    {
        var allCustomers = customerService.GetCustomers();

        int pageSize = 100; // number of customers per page
        int pageNumber = 1; // default to first page
        int skip = (pageNumber - 1) * pageSize;
        customers = allCustomers.Skip(skip).Take(pageSize).ToList();

        return customers;
    }

    private async Task OnStateChanged(string newState, string value)
    {
        selectedState = value;
        await InvokeAsync(StateHasChanged); // force the component to re-render
    }

    private bool Search(Customer customer)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (customer.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || customer.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || customer.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void Save()
    {
        if (string.IsNullOrEmpty(customer.FirstName)
            || string.IsNullOrEmpty(customer.LastName)
            || string.IsNullOrEmpty(customer.PhoneNumber)
            || string.IsNullOrEmpty(customer.State))
        {
            snackBar.Add("Please fill in all required fields.", Severity.Error);
            return;
        }

        customerService.SaveCustomer(customer);
        customer = new Customer();
        snackBar.Add("Customer Saved.", Severity.Success);
        GetCustomers();
    }


    private void Edit(int id)
    {
        customer = customers.FirstOrDefault(c => c.Id == id);
    }
    private void Delete(int id)
    {
        customerService.DeleteCustomer(id);
        snackBar.Add("Customer Deleted.", Severity.Success);
        GetCustomers();
    }

}